{
  "openapi": "3.0.0",
  "info": {
    "title": "Library Management System",
    "version": "1.0.0",
    "description": "API for managing users and books in a library."
  },
  "paths": {
    "/api/users": {
      "post": {
        "tags": ["User"],
        "summary": "Register a new user",
        "operationId": "registerUser",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 50,
                    "pattern": "^[a-zA-Z\\s]+$"
                  },
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "password": {
                    "type": "string",
                    "minLength": 8,
                    "maxLength": 30
                  },
                  "role": {
                    "type": "string",
                    "enum": ["borrower", "admin"]
                  }
                },
                "required": ["name", "email", "password", "role"]
              },
              "examples": {
                "user": {
                  "value": {
                    "name": "John Doe",
                    "email": "johndoe@example.com",
                    "password": "password123",
                    "role": "borrower"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully"
          },
          "409": {
            "description": "User already exists"
          }
        }
      }
    },
    "/api/users/{id}": {
      "patch": {
        "tags": ["User"],
        "summary": "Update user information",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "User ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 50,
                    "pattern": "^[a-zA-Z\\s]+$"
                  },
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "password": {
                    "type": "string",
                    "minLength": 8,
                    "maxLength": 30
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully"
          },
          "404": {
            "description": "User not found"
          },
          "403": {
            "description": "Forbidden: not authorized"
          }
        }
      },
      "delete": {
        "tags": ["User"],
        "summary": "Delete a user",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "User ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted successfully"
          },
          "404": {
            "description": "User not found"
          },
          "403": {
            "description": "Forbidden: not authorized"
          }
        }
      }
    },
    "/api/users/login": {
      "post": {
        "tags": ["User"],
        "summary": "Log in a user",
        "operationId": "loginUser",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "password": {
                    "type": "string"
                  }
                },
                "required": ["email", "password"]
              }
            }
          },
          "responses": {
            "200": {
              "description": "Login successful"
            },
            "401": {
              "description": "Invalid credentials"
            }
          }
        }
      }
    },
    "/api/books": {
      "post": {
        "tags": ["Book"],
        "summary": "Add a new book",
        "operationId": "addBook",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 255
                  },
                  "author": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 255
                  },
                  "ISBN": {
                    "type": "string",
                    "pattern": "^(?:ISBN(?:-13)?:? )?(?=[-0-9 ]{13}$|(?=[0-9X]{10}$)0?\\[\\dX]{10}|(?:[0-9]{3}[- ]?){3}[0-9]{1,5}[- ]?[0-9]+[- ]?[0-9]+[- ]?[0-9X])[-0-9X ]+$"
                  },
                  "totalQuantity": {
                    "type": "integer",
                    "minimum": 0
                  },
                  "shelfLocation": {
                    "type": "string"
                  }
                },
                "required": ["title", "author", "ISBN", "totalQuantity", "shelfLocation"]
              }
            }
          },
          "responses": {
            "201": {
              "description": "Book added successfully"
            }
          }
        }
      },
      "get": {
        "tags": ["Book"],
        "summary": "Get a list of books",
        "operationId": "getBooks",
        "parameters": [
          {
            "name": "searchTerm",
            "in": "query",
            "description": "Search term for title, author, or ISBN",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Field to order by",
            "schema": {
              "type": "string",
              "enum": ["title", "author", "ISBN", "totalQuantity", "shelfLocation", "createdAt", "updatedAt"]
            }
          },
          {
            "name": "orderDirection",
            "in": "query",
            "description": "Direction of the ordering",
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"]
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of results per page",
            "schema": {
              "type": "integer",
              "minimum": 5,
              "maximum": 100,
              "default": 10
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of books",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "books": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "string", "format": "uuid" },
                          "title": { "type": "string" },
                          "author": { "type": "string" },
                          "ISBN": { "type": "string" },
                          "totalQuantity": { "type": "integer" },
                          "currentQuantity": { "type": "integer" },
                          "shelfLocation": { "type": "string" }
                        }
                      }
                    },
                    "count": { "type": "integer" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/books/{id}": {
      "patch": {
        "tags": ["Book"],
        "summary": "Update book information",
        "operationId": "updateBook",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Book ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 255
                  },
                  "author": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 255
                  },
                  "ISBN": {
                    "type": "string",
                    "pattern": "^(?:ISBN(?:-13)?:? )?(?=[-0-9 ]{13}$|(?=[0-9X]{10}$)0?\\[\\dX]{10}|(?:[0-9]{3}[- ]?){3}[0-9]{1,5}[- ]?[0-9]+[- ]?[0-9]+[- ]?[0-9X])[-0-9X ]+$"
                  },
                  "totalQuantity": {
                    "type": "integer",
                    "minimum": 0
                  },
                  "shelfLocation": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Book updated successfully"
            },
            "404": {
              "description": "Book not found"
            },
            "400": {
              "description": "Invalid input"
            }
          }
        }
      },
      "delete": {
        "tags": ["Book"],
        "summary": "Delete a book",
        "operationId": "deleteBook",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Book ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Book deleted successfully"
          },
          "404": {
            "description": "Book not found"
          },
          "400": {
            "description": "Book is currently borrowed"
          }
        }
      }
    },
    "/api/borrowings/borrow": {
      "post": {
        "tags": ["Borrowing"],
        "summary": "Borrow a book",
        "description": "Allows a user to borrow a book from the library.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "ID of the user borrowing the book (required for admin)."
                  },
                  "bookId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "ID of the book to borrow (required)."
                  },
                  "dueDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The due date for returning the book (must be in the future)."
                  }
                },
                "required": ["bookId", "dueDate"]
              },
              "examples": {
                "example": {
                  "value": {
                    "userId": "e7b0f623-8fbd-4e88-b448-6f74f6c7e6ee",
                    "bookId": "a4c4b98d-ffaf-4e36-8b36-d5f8e7cd4418",
                    "dueDate": "2024-12-01T12:00:00Z"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully borrowed the book.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Borrowing"
                }
              }
            }
          },
          "404": {
            "description": "Book not found or user not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict error, book already borrowed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/borrowings/return/{id}": {
      "post": {
        "tags": ["Borrowing"],
        "summary": "Return a borrowed book",
        "description": "Allows a user to return a borrowed book.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the borrowing record.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned the book.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Borrowing"
                }
              }
            }
          },
          "404": {
            "description": "Borrowing record not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict error, book already returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/borrowings/user/{userId}/borrowings": {
      "get": {
        "tags": ["Borrowing"],
        "summary": "Get all borrowings for a user",
        "description": "Retrieves all borrowings made by a user.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "ID of the user.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "required": false,
            "description": "Field to order by.",
            "schema": {
              "type": "string",
              "enum": ["createdAt", "updatedAt"]
            }
          },
          {
            "name": "orderDirection",
            "in": "query",
            "required": false,
            "description": "Direction to order (asc or desc).",
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"]
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Number of results per page (5 to 100).",
            "schema": {
              "type": "integer",
              "minimum": 5,
              "maximum": 100,
              "default": 10
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page number to retrieve.",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of borrowings for the user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer"
                    },
                    "borrowings": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Borrowing"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/borrowings/overdue": {
      "get": {
        "tags": ["Borrowing"],
        "summary": "Get all overdue borrowings",
        "description": "Retrieves all overdue borrowings in the system.",
        "parameters": [
          {
            "name": "orderBy",
            "in": "query",
            "required": false,
            "description": "Field to order by.",
            "schema": {
              "type": "string",
              "enum": ["createdAt", "updatedAt"]
            }
          },
          {
            "name": "orderDirection",
            "in": "query",
            "required": false,
            "description": "Direction to order (asc or desc).",
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"]
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Number of results per page (5 to 100).",
            "schema": {
              "type": "integer",
              "minimum": 5,
              "maximum": 100,
              "default": 10
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page number to retrieve.",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of overdue borrowings.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer"
                    },
                    "overdueBorrowings": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Borrowing"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "role": {
            "type": "string",
            "enum": ["borrower", "admin"]
          }
        }
      },
      "Book": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "title": {
            "type": "string"
          },
          "author": {
            "type": "string"
          },
          "ISBN": {
            "type": "string"
          },
          "totalQuantity": {
            "type": "integer"
          },
          "currentQuantity": {
            "type": "integer"
          },
          "shelfLocation": {
            "type": "string"
          }
        }
      },
      "Borrowing": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "bookId": {
            "type": "string",
            "format": "uuid"
          },
          "borrowDate": {
            "type": "string",
            "format": "date-time"
          },
          "dueDate": {
            "type": "string",
            "format": "date-time"
          },
          "returnDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "status": {
            "type": "string",
            "enum": ["borrowed", "returned", "overdue"]
          }
        }
      }
    }
  }
}
